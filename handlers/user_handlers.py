from datetime import datetime, date, timedelta
from copy import deepcopy
import requests
from config_data.config import Config, load_config
from aiogram import Router, F
from aiogram.filters import Command, CommandStart, Text
from aiogram.types import CallbackQuery, Message, URLInputFile, InputMediaPhoto, ContentType
from database.database import user_dict_template, users_db, booking_db, time_list_template
from keyboards.pagination_kb import (create_pag_kb_question, create_pag_kb_photo)
from keyboards.other_kb import (create_menu_kb, create_info_kb, create_date_kb,
                                create_time_kb, create_confirmation_kb, create_pay_kb)
from lexicon.lexicon import LEXICON, LEXICON_QUESTION, LEXICON_PHOTO

router: Router = Router()


# –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()


# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start" -
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@router.message(CommandStart())
async def process_start_cammand(message: Message):
    if message.from_user.id not in users_db:
        users_db[int(message.from_user.id)] = deepcopy(
            user_dict_template)
        print(users_db)
    text = LEXICON['/start']
    photo = URLInputFile(url=LEXICON['menu_photo'])
    video = LEXICON['video']
    await message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=create_menu_kb(video))


# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ
@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(LEXICON['/help'])


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–¥–∏–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
@router.callback_query(Text(text='backword_menu'))
async def process_backward_press(callback: CallbackQuery):
    text = LEXICON['/start']
    photo = URLInputFile(url=LEXICON['menu_photo'])
    video = LEXICON['video']
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=create_menu_kb(video))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–Ω—é
@router.callback_query(Text(text='info'))
async def process_info_press(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        text=LEXICON['info'],
        parse_mode='HTML',
        reply_markup=create_info_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–Ω—é
@router.callback_query(Text(text='sign_up'))
async def process_sign_up_press(callback: CallbackQuery):
    date_list = []
    for i in range(7):
        now = date.today()
        date_1 = now + timedelta(days=i)
        date_1 = datetime.strftime(date_1, '%d.%m.%Y')
        date_list.append(date_1)
    date_1, date_2, date_3, date_4, date_5, date_6, date_7 = date_list[0], date_list[1], date_list[2], date_list[3], date_list[4], date_list[5], date_list[6]
    await callback.message.delete()
    await callback.message.answer(
        text=LEXICON['sign_up'],
        reply_markup=create_date_kb(date_1, date_2, date_3, date_4, date_5, date_6, date_7))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–æ–π
# –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
@router.callback_query(Text(text=['date_0', 'date_1', 'date_2', 'date_3', 'date_4', 'date_5', 'date_6']))
async def process_date_press(callback: CallbackQuery):
    time_list = deepcopy(time_list_template)
    date = callback.message.reply_markup.inline_keyboard[int(callback.data.split("_")[1])][0].text
    if date in booking_db:
        for i in range(5):
            if time_list[i] in booking_db[date]:
                time_list[i] = '–£–∂–µ –∑–∞–±—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æü§∑üèº‚Äç‚ôÇ'
    time_0, time_1, time_2, time_3, time_4 = time_list[0], time_list[1], time_list[2], time_list[3], time_list[4]
    await callback.message.delete()
    await callback.message.answer(
        text=f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {date} \n{LEXICON["date"]}',
        reply_markup=create_time_kb(time_0, time_1, time_2, time_3, time_4))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.callback_query(Text(text='backword_date'))
async def process_backward_press(callback: CallbackQuery):
    date_list = []
    for i in range(7):
        now = date.today()
        date_1 = now + timedelta(days=i)
        date_1 = datetime.strftime(date_1, '%d.%m.%Y')
        date_list.append(date_1)
    date_1, date_2, date_3, date_4, date_5, date_6, date_7 = date_list[0], date_list[1], date_list[2], date_list[3], date_list[4], date_list[5], date_list[6]
    await callback.message.delete()
    await callback.message.answer(
        text=LEXICON['sign_up'],
        reply_markup=create_date_kb(date_1, date_2, date_3, date_4, date_5, date_6, date_7))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
# –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
@router.callback_query(Text(text=['time_0', 'time_1', 'time_2', 'time_3', 'time_4']))
async def process_date_press(callback: CallbackQuery):
    date = callback.message.text.split(" ")[2]
    time = callback.message.reply_markup.inline_keyboard[int(callback.data.split("_")[1])][0].text
    if time == '–£–∂–µ –∑–∞–±—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æü§∑üèº‚Äç‚ôÇ':
        await callback.message.answer(
            text='–î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.')
    else:
        await callback.message.delete()
        await callback.message.answer(
            text=f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:\n {date} {time}',
            reply_markup=create_confirmation_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏
@router.callback_query(Text(text='backword_time'))
async def process_backward_press(callback: CallbackQuery):
    time_list = deepcopy(time_list_template)
    date = callback.message.text.split(" ")[4]
    if date in booking_db:
        for i in range(5):
            if time_list[i] in booking_db[date]:
                time_list[i] = '–£–∂–µ –∑–∞–±—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æü§∑üèº‚Äç‚ôÇ'
    time_0, time_1, time_2, time_3, time_4 = time_list[0], time_list[1], time_list[2], time_list[3], time_list[4]
    await callback.message.delete()
    await callback.message.answer(
        text=f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {date} \n{LEXICON["date"]}',
        reply_markup=create_time_kb(time_0, time_1, time_2, time_3, time_4))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(Text(text='confirmation'))
async def process_confirmation_press(callback: CallbackQuery):
    date = callback.message.text.split(" ")[4]
    time = callback.message.text.split(" ")[5]
    if date not in booking_db:
        booking_db[date] = []
        booking_db[date].append(time)
    else:
        booking_db[date].append(time)
    await callback.message.delete()
    await callback.message.answer(
        text=f'–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –ø–æ —Ñ—Ä–∏–¥–∞–π–≤–∏–Ω–≥—É {date} –≤ {time}.')
    params: dict[str, str] = {
        'chat_id': f'{config.tg_bot.admin_ids[1]}',
        'text': f'{callback.from_user.full_name} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª(–∞) '
        f'–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Ñ—Ä–∏–¥–∞–π–≤–∏–Ω–≥—É - {date} –≤ {time}.\n'
        f'tg: @{callback.from_user.username}'}
    response = requests.get(
        'https://api.telegram.org/bot' + config.tg_bot.token + '/sendMessage', params=params)
    params: dict[str, str] = {
        'chat_id': f'{config.tg_bot.admin_ids[0]}',
        'text': f'{callback.from_user.full_name} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª(–∞) '
        f'–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Ñ—Ä–∏–¥–∞–π–≤–∏–Ω–≥—É - {date} –≤ {time}.\n'
        f'tg: {callback.from_user.url}'}
    response = requests.get(
        'https://api.telegram.org/bot' + config.tg_bot.token + '/sendMessage', params=params)
    await callback.message.answer(
        text='–£–¥–æ–±–Ω–æ –ª–∏ –≤–∞–º –±—É–¥–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ ?',
        reply_markup=create_pay_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–î–∞"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(Text(text='yes'))
async def process_info_press(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        text=LEXICON['pay'],
        parse_mode='HTML')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(Text(text='no'))
async def process_info_press(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        text=f'–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–Ω—è—Ç–∏—è.\n–î–æ –≤—Å—Ç—Ä–µ—á–∏üôÇ')


# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# —Å–∫—Ä–∏–Ω–∞ –æ–± –æ–ø–ª–∞—Ç–µ
@router.message(F.content_type == ContentType.PHOTO)
async def process_page_sending(message: Message):
    params: dict[str, str] = {
        'chat_id': f'{config.tg_bot.admin_ids[1]}',
        'text': f'{message.from_user.full_name} –æ–ø–ª–∞—Ç–∏–ª(–∞) '
        f'–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Ñ—Ä–∏–¥–∞–π–≤–∏–Ω–≥—É.\ntg: @{message.from_user.username}'}
    response = requests.get(
        'https://api.telegram.org/bot' + config.tg_bot.token + '/sendMessage', params=params)
    await message.send_copy(chat_id=f'{config.tg_bot.admin_ids[1]}')
    params: dict[str, str] = {
        'chat_id': f'{config.tg_bot.admin_ids[0]}',
        'text': f'{message.from_user.full_name} –æ–ø–ª–∞—Ç–∏–ª(–∞) '
        f'–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Ñ—Ä–∏–¥–∞–π–≤–∏–Ω–≥—É.\ntg: @{message.from_user.username}'}
    response = requests.get(
        'https://api.telegram.org/bot' + config.tg_bot.token + '/sendMessage', params=params)
    await message.send_copy(chat_id=f'{config.tg_bot.admin_ids[0]}')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–Ω—é
@router.callback_query(Text(text='question'))
async def process_question_press(callback: CallbackQuery):
    text = LEXICON_QUESTION[str(users_db[callback.from_user.id]['qu'])]
    pag = f'{str(users_db[callback.from_user.id]["qu"])}/{len(LEXICON_QUESTION)}'
    await callback.message.delete()
    await callback.message.answer(
        text=text,
        parse_mode='HTML',
        reply_markup=create_pag_kb_question(pag=pag))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@router.callback_query(Text(text='forward'))
async def process_forward_press(callback: CallbackQuery):
    if users_db[callback.from_user.id]['qu'] < len(LEXICON_QUESTION):
        users_db[callback.from_user.id]['qu'] += 1
    elif users_db[callback.from_user.id]['qu'] == len(LEXICON_QUESTION):
        users_db[callback.from_user.id]['qu'] = 1
    text = LEXICON_QUESTION[str(users_db[callback.from_user.id]['qu'])]
    pag = f'{str(users_db[callback.from_user.id]["qu"])}/{len(LEXICON_QUESTION)}'
    await callback.message.edit_text(
        text=text,
        parse_mode='HTML',
        reply_markup=create_pag_kb_question(pag=pag))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@router.callback_query(Text(text='backward'))
async def process_backward_press(callback: CallbackQuery):
    if users_db[callback.from_user.id]['qu'] > 1:
        users_db[callback.from_user.id]['qu'] -= 1
    elif users_db[callback.from_user.id]['qu'] == 1:
        users_db[callback.from_user.id]['qu'] = len(LEXICON_QUESTION)
    text = LEXICON_QUESTION[str(users_db[callback.from_user.id]['qu'])]
    pag = f'{str(users_db[callback.from_user.id]["qu"])}/{len(LEXICON_QUESTION)}'
    await callback.message.edit_text(
        text=text,
        parse_mode='HTML',
        reply_markup=create_pag_kb_question(pag=pag))


# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–§–æ—Ç–æ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
# # –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–Ω—é
# @router.callback_query(Text(text='photo'))
# async def process_question_press(callback: CallbackQuery):
#     photo = URLInputFile(url=LEXICON_PHOTO[str(users_db[callback.from_user.id]['ph'])])
#     pag = f'{str(users_db[callback.from_user.id]["ph"])}/{len(LEXICON_PHOTO)}'
#     await callback.message.delete()
#     await callback.message.answer_photo(
#         photo=photo,
#         reply_markup=create_pag_kb_photo(pag=pag))


# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
# # –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
# @router.callback_query(Text(text='forward_ph'))
# async def process_forward_press(callback: CallbackQuery):
#     if users_db[callback.from_user.id]['ph'] < len(LEXICON_PHOTO):
#         users_db[callback.from_user.id]['ph'] += 1
#     elif users_db[callback.from_user.id]['ph'] == len(LEXICON_QUESTION):
#         users_db[callback.from_user.id]['qu'] = 1
#     photo = URLInputFile(url=LEXICON_PHOTO[str(users_db[callback.from_user.id]['ph'])])
#     pag = f'{str(users_db[callback.from_user.id]["ph"])}/{len(LEXICON_PHOTO)}'
#     await callback.message.answer_photo(
#         photo=photo,
#         reply_markup=create_pag_kb_photo(pag=pag))


# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
# # –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
# @router.callback_query(Text(text='backward_ph'))
# async def process_backward_press(callback: CallbackQuery):
#     if users_db[callback.from_user.id]['ph'] > 1:
#         users_db[callback.from_user.id]['ph'] -= 1
#     elif users_db[callback.from_user.id]['ph'] == 1:
#         users_db[callback.from_user.id]['ph'] = len(LEXICON_PHOTO)
#     photo = URLInputFile(url=LEXICON_PHOTO[str(users_db[callback.from_user.id]['ph'])])
#     pag = f'{str(users_db[callback.from_user.id]["ph"])}/{len(LEXICON_PHOTO)}'
#     await callback.message.answer_photo(
#         photo=photo,
#         reply_markup=create_pag_kb_photo(pag=pag))
